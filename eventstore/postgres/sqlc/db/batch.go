// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.25.0
// source: batch.go

package db

import (
	"context"
	"errors"
	"time"

	"github.com/google/uuid"
	"github.com/jackc/pgx/v5"
)

var (
	ErrBatchAlreadyClosed = errors.New("batch already closed")
)

const insertEvents = `-- name: InsertEvents :batchmany
INSERT INTO "events" (
    "event_type",
    "timestamp",
    "aggregate_type",
    "aggregate_id",
    "version",
    "data",
    "metadata"
) VALUES (
    $1,
    $2,
    $3,
    $4,
    $5,
    $6,
    $7
) RETURNING "position"
`

type InsertEventsBatchResults struct {
	br     pgx.BatchResults
	tot    int
	closed bool
}

type InsertEventsParams struct {
	EventType     string
	Timestamp     time.Time
	AggregateType string
	AggregateID   uuid.UUID
	Version       int
	Data          []byte
	Metadata      []byte
}

func (q *Queries) InsertEvents(ctx context.Context, arg []InsertEventsParams) *InsertEventsBatchResults {
	batch := &pgx.Batch{}
	for _, a := range arg {
		vals := []interface{}{
			a.EventType,
			a.Timestamp,
			a.AggregateType,
			a.AggregateID,
			a.Version,
			a.Data,
			a.Metadata,
		}
		batch.Queue(insertEvents, vals...)
	}
	br := q.db.SendBatch(ctx, batch)
	return &InsertEventsBatchResults{br, len(arg), false}
}

func (b *InsertEventsBatchResults) Query(f func(int, []int64, error)) {
	defer b.br.Close()
	for t := 0; t < b.tot; t++ {
		items := []int64{}
		if b.closed {
			if f != nil {
				f(t, items, ErrBatchAlreadyClosed)
			}
			continue
		}
		err := func() error {
			rows, err := b.br.Query()
			if err != nil {
				return err
			}
			defer rows.Close()
			for rows.Next() {
				var position int64
				if err := rows.Scan(&position); err != nil {
					return err
				}
				items = append(items, position)
			}
			return rows.Err()
		}()
		if f != nil {
			f(t, items, err)
		}
	}
}

func (b *InsertEventsBatchResults) Close() error {
	b.closed = true
	return b.br.Close()
}
