// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.25.0
// source: snapshots.sql

package db

import (
	"context"
	"time"

	"github.com/google/uuid"
)

const getSnapshot = `-- name: GetSnapshot :one
SELECT aggregate_id, aggregate_type, version, data, timestamp
FROM "snapshots"
WHERE "aggregate_id" = $1
ORDER BY "version" DESC
LIMIT 1
`

func (q *Queries) GetSnapshot(ctx context.Context, aggregateID uuid.UUID) (Snapshot, error) {
	row := q.db.QueryRow(ctx, getSnapshot, aggregateID)
	var i Snapshot
	err := row.Scan(
		&i.AggregateID,
		&i.AggregateType,
		&i.Version,
		&i.Data,
		&i.Timestamp,
	)
	return i, err
}

const insertSnapshot = `-- name: InsertSnapshot :one
INSERT INTO "snapshots" (
    "aggregate_type",
    "aggregate_id",
    "version",
    "data",
    "timestamp"
) VALUES (
    $1,
    $2,
    $3,
    $4,
    $5
)
RETURNING aggregate_id, aggregate_type, version, data, timestamp
`

type InsertSnapshotParams struct {
	AggregateType string
	AggregateID   uuid.UUID
	Version       int
	Data          []byte
	Timestamp     time.Time
}

func (q *Queries) InsertSnapshot(ctx context.Context, arg InsertSnapshotParams) (Snapshot, error) {
	row := q.db.QueryRow(ctx, insertSnapshot,
		arg.AggregateType,
		arg.AggregateID,
		arg.Version,
		arg.Data,
		arg.Timestamp,
	)
	var i Snapshot
	err := row.Scan(
		&i.AggregateID,
		&i.AggregateType,
		&i.Version,
		&i.Data,
		&i.Timestamp,
	)
	return i, err
}
