// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.25.0
// source: streams.sql

package db

import (
	"context"
	"time"

	"github.com/google/uuid"
)

const getStream = `-- name: GetStream :one
SELECT id, aggregate_type, position, version, updated_at FROM "streams" WHERE "id" = $1
`

func (q *Queries) GetStream(ctx context.Context, id uuid.UUID) (Stream, error) {
	row := q.db.QueryRow(ctx, getStream, id)
	var i Stream
	err := row.Scan(
		&i.ID,
		&i.AggregateType,
		&i.Position,
		&i.Version,
		&i.UpdatedAt,
	)
	return i, err
}

const upsertSteam = `-- name: UpsertSteam :exec
INSERT INTO "streams" (
    "id",
    "aggregate_type",
    "position",
    "version",
    "updated_at"
) VALUES (
    $1,
    $2,
    $3,
    $4,
    $5
) ON CONFLICT (id) 
DO UPDATE SET
    "position" = EXCLUDED.position,
    "version" = EXCLUDED.version,
    "updated_at" = EXCLUDED.updated_at
`

type UpsertSteamParams struct {
	ID            uuid.UUID
	AggregateType string
	Position      int64
	Version       int
	UpdatedAt     time.Time
}

func (q *Queries) UpsertSteam(ctx context.Context, arg UpsertSteamParams) error {
	_, err := q.db.Exec(ctx, upsertSteam,
		arg.ID,
		arg.AggregateType,
		arg.Position,
		arg.Version,
		arg.UpdatedAt,
	)
	return err
}
