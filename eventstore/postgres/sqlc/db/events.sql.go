// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.25.0
// source: events.sql

package db

import (
	"context"

	"github.com/google/uuid"
)

const listEventsByAggregateID = `-- name: ListEventsByAggregateID :many
SELECT position, event_type, timestamp, aggregate_type, aggregate_id, version, data, metadata
FROM "events"
WHERE "aggregate_id" = $1
ORDER BY "version" ASC
`

func (q *Queries) ListEventsByAggregateID(ctx context.Context, aggregateID uuid.UUID) ([]Event, error) {
	rows, err := q.db.Query(ctx, listEventsByAggregateID, aggregateID)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	items := []Event{}
	for rows.Next() {
		var i Event
		if err := rows.Scan(
			&i.Position,
			&i.EventType,
			&i.Timestamp,
			&i.AggregateType,
			&i.AggregateID,
			&i.Version,
			&i.Data,
			&i.Metadata,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const listEventsByAggregateIDAndVersion = `-- name: ListEventsByAggregateIDAndVersion :many
SELECT position, event_type, timestamp, aggregate_type, aggregate_id, version, data, metadata
FROM "events"
WHERE "aggregate_id" = $1
AND "version" >= $2
ORDER BY "version" ASC
`

type ListEventsByAggregateIDAndVersionParams struct {
	AggregateID uuid.UUID
	Version     int
}

func (q *Queries) ListEventsByAggregateIDAndVersion(ctx context.Context, arg ListEventsByAggregateIDAndVersionParams) ([]Event, error) {
	rows, err := q.db.Query(ctx, listEventsByAggregateIDAndVersion, arg.AggregateID, arg.Version)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	items := []Event{}
	for rows.Next() {
		var i Event
		if err := rows.Scan(
			&i.Position,
			&i.EventType,
			&i.Timestamp,
			&i.AggregateType,
			&i.AggregateID,
			&i.Version,
			&i.Data,
			&i.Metadata,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}
